{"version":3,"sources":["app/settings/userlist/user-list.component.ts"],"names":[],"mappings":"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","file":"app/settings/userlist/user-list.component.js","sourcesContent":["import { Component, Input, Output, OnInit, EventEmitter, OnChanges } from '@angular/core';\r\n\r\n// import { ComboboxComponent } from '../../shared/combobox/combobox.component';\r\nimport { GridOptions } from 'ag-grid/main';\r\nimport { IAuthUser } from './user-list.model';\r\nimport { UserService } from './user-list.service';\r\nimport { UserProvide } from './user-list.provide';\r\nimport { Subscription } from 'rxjs/Subscription';\r\nimport { TranslatePipe, TranslateService, LangChangeEvent } from 'ng2-translate/ng2-translate';\r\n\r\nimport { UserDetailComponent } from './user-detail/user-detail.component';\r\n\r\nimport { DataFilterUserService } from './user-filter.service';\r\n\r\n@Component({\r\n    moduleId: module.id,\r\n    selector: 'wblg-userlist',\r\n    templateUrl: './user-list.component.html',\r\n    styleUrls: ['./user-list.component.css'],\r\n    // directives: [AgGridNg2, UserDetailComponent],\r\n    // providers: [DataFilterUserService, UserService],\r\n    // pipes: [TranslatePipe]\r\n})\r\n\r\nexport class DropDownListComponent implements OnInit, OnChanges {\r\n    @Input() selectedButton: string;\r\n    @Output() selectedButtonChange = new EventEmitter();\r\n    isRowSelected: boolean;\r\n    currentData: IAuthUser;\r\n    dataSelectedRow: IAuthUser;\r\n    public UsersList: IAuthUser[];\r\n    private FiltersData: any;\r\n    public message: string;\r\n    private columnDefs: any;\r\n    private gridOptions: GridOptions;\r\n    private _subTranslate: Subscription;\r\n\r\n    constructor(private userService: UserService, private _filters: DataFilterUserService, private _translate: TranslateService) {\r\n        this.selectedButton = '';\r\n        this.UsersList = [];\r\n        this.message = 'Null';\r\n        this.FiltersData = [];\r\n        this.gridOptions = <GridOptions>{};\r\n        this.currentData = <IAuthUser>{};\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.createColunmDef();\r\n        this.createGridOptions();\r\n\r\n        this.FiltersData = [\r\n            { value: '', label: 'LABEL.LOGIN', data: [], dropdown: false },\r\n            { value: '', label: 'LABEL.COMPANY', data: [], dropdown: false },\r\n            { value: '', label: 'LABEL.ROLE', data: [], dropdown: false }\r\n        ];\r\n\r\n        this._filters.getCompaniesList().subscribe(list => {\r\n            this.FiltersData[2].data = list;\r\n        });\r\n\r\n        this._subTranslate = this._translate.onLangChange.debounceTime(500).subscribe((event: LangChangeEvent) => {\r\n            if (this.gridOptions && this.gridOptions.api) { this.gridOptions.api.refreshHeader(); }\r\n        });\r\n\r\n        this.refreshData();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this._subTranslate.unsubscribe();\r\n    }\r\n\r\n    ngOnChanges() {\r\n        if (this.selectedButton === 'add')\r\n            this.currentData = <IAuthUser>{};\r\n        else {\r\n            if (this.dataSelectedRow)\r\n                this.currentData = this.dataSelectedRow;\r\n            if(this.selectedButton === 'delete' && this.dataSelectedRow) {\r\n                this.userService.deleteUser(this.dataSelectedRow.id);\r\n                console.log(\"User \" + this.dataSelectedRow.login + \" was deleted!\"); \r\n            }\r\n        }\r\n    }\r\n\r\n    public refreshData(): void {\r\n        this.userService.getUserList()\r\n            .subscribe(res => {\r\n                this.UsersList = res;\r\n\r\n            },\r\n            err => {\r\n                this.UsersList = [];\r\n                this.message = 'Error get data:' + JSON.stringify(err);\r\n            });\r\n    }\r\n\r\n    private createColunmDef(): void {\r\n        this.columnDefs = [\r\n            {\r\n                headerName: 'LABEL.LOGIN',\r\n                field: 'login',\r\n                width: 200,\r\n                hidden: false\r\n            },\r\n            {\r\n                headerName: 'LABEL.USERNAME',\r\n                field: 'username',\r\n                width: 200,\r\n                hidden: false\r\n            },\r\n            {\r\n                headerName: 'E-mail',\r\n                field: 'email',\r\n                width: 200,\r\n                hidden: false\r\n            },\r\n            {\r\n                headerName: 'LABEL.COMPANY',\r\n                field: 'company',\r\n                width: 200,\r\n                hidden: false\r\n            },\r\n            {\r\n                headerName: 'LABEL.ROLE',\r\n                field: 'role',\r\n                width: 200,\r\n                hidden: false\r\n            }\r\n        ];\r\n    }\r\n\r\n    private createGridOptions(): void {\r\n        this.gridOptions = {\r\n            columnDefs: this.columnDefs,\r\n            rowData: this.UsersList,\r\n            rowSelection: 'single',\r\n            enableColResize: true,\r\n            headerCellRenderer: (params: any) => {\r\n                let txtGroup = document.getElementsByClassName('ag-header-group-text');\r\n                for (let i = 0; i < txtGroup.length; i++) {\r\n                    let element = txtGroup.item(i);\r\n                    let text = element.textContent;\r\n                    let txt = text;\r\n                    this._translate.get(text).subscribe((val) => {\r\n                        element.innerHTML = '';\r\n                        element.appendChild(document.createTextNode(val));\r\n\r\n                    });\r\n                }\r\n                return this.translateHeaderName(params);\r\n            },\r\n            onGridReady: () => {\r\n                // this.gridOptions.api.sizeColumnsToFit();\r\n            },\r\n            // forPrint: false,\r\n            // suppressHorizontalScroll: true,\r\n            // getRowClass: (params: any) => {\r\n\r\n            //     return (params.node.data.type === '0' )? 'accepted-employeer ' : 'accepted-traider ';\r\n            // },\r\n            suppressMovableColumns: true,\r\n\r\n            //  enableSorting: true,\r\n            //  enableFilter: true,\r\n            headerHeight: 30,\r\n        };\r\n    }\r\n\r\n    onCellClicked(event: any) {\r\n        if (this.selectedButton === 'add')\r\n            this.currentData = <IAuthUser>{};\r\n        else\r\n            this.currentData = event.data;\r\n\r\n        this.dataSelectedRow = event.data;\r\n    }\r\n\r\n    hideForm() {\r\n        this.selectedButtonChange.emit('');\r\n    }\r\n\r\n    private translateHeaderName(params: any): string {\r\n        let translate: string = params.colDef.headerName;\r\n        this._translate.get(params.colDef.headerName).subscribe((val) => {\r\n            translate = val;\r\n        });\r\n        return translate;\r\n    }\r\n\r\n    setFilters() {\r\n\r\n    }\r\n}"],"sourceRoot":"/source/"}