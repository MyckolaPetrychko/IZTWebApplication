{"version":3,"sources":["app/settings/userlist/user-list.service.ts"],"names":[],"mappings":"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","file":"app/settings/userlist/user-list.service.js","sourcesContent":["import {\r\n    Injectable,\r\n    Optional\r\n} from '@angular/core';\r\n\r\nimport {\r\n    Http,\r\n    Response,\r\n    Headers,\r\n    RequestOptions\r\n} from '@angular/http';\r\n\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/catch';\r\nimport 'rxjs/add/operator/map';\r\nimport 'rxjs/add/operator/do';\r\n\r\nimport { IAuthUser } from '../../shared/auth/auth-user.model';\r\nimport {\r\n    UserListApi,\r\n    UserIdApi\r\n} from './user-list.constant';\r\n\r\n@Injectable()\r\nexport class UserService {\r\n    private _role: string;\r\n\r\n    constructor(private _http: Http) {\r\n        this._role = 'admin';\r\n    }\r\n    \r\n    getUserList(): Observable<any> {\r\n            if (this._role === 'anonym') {\r\n            return Observable.throw('User is not authorized');\r\n        }\r\n\r\n        return this._http.get(UserListApi)\r\n            .map(res => <IAuthUser[]>res.json())\r\n            .do(data => {\r\n                console.debug('UserList' +\r\n                    '\\nUrl: ' + UserListApi +\r\n                    '\\nData: ' + JSON.stringify(data));\r\n            })\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    public getUserId(userId: string): Observable<any> {\r\n        if (this._role === 'anonym') {\r\n            return Observable.throw('User is not authorized');\r\n        }\r\n        let urlUserIdApi = UserIdApi.replace('%userID%', userId);\r\n        return this._http.get(urlUserIdApi)\r\n            .map(res => <IAuthUser>res.json())\r\n            .do(data => {\r\n                console.debug('UserId' +\r\n                    '\\nUrl: ' + urlUserIdApi +\r\n                    '\\nData: ' + JSON.stringify(data));\r\n            })\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    public addUser(_user: IAuthUser): Observable<any> {\r\n        if (this._role !== 'anonym') {\r\n            return Observable.throw('User is not authorized');\r\n        }\r\n        let body = JSON.stringify(_user);\r\n        let headers = new Headers({ 'Content-Type': 'application/json' });\r\n        let options = new RequestOptions({ headers: headers });\r\n\r\n        return this._http.post(UserListApi, body, options)\r\n            .map(res => <IAuthUser>res.json())\r\n            .do(data => {\r\n                console.debug('UserAdd' +\r\n                    '\\nUrl: ' + UserListApi +\r\n                    '\\nData: ' + JSON.stringify(data));\r\n            })\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    public updateUser(_newUser: IAuthUser): Observable<any> {\r\n        if (this._role !== 'anonym') {\r\n            return Observable.throw('User is not authorized');\r\n        }\r\n        let body = JSON.stringify(_newUser);\r\n        let headers = new Headers({ 'Content-Type': 'application/json' });\r\n        let options = new RequestOptions({ headers: headers });\r\n\r\n        return this._http.put(UserListApi, body, options)\r\n            .map(res => <IAuthUser>res.json())\r\n            .do(data => {\r\n                console.debug('UserUpdate' +\r\n                    '\\nUrl: ' + UserListApi +       \r\n                    '\\nData: ' + JSON.stringify(data));\r\n            })\r\n            .catch(this.handleError);\r\n    }\r\n\r\n        public deleteUser(userId: string): Observable<any> {\r\n        if (this._role !== 'anonym') {\r\n            return Observable.throw('User is not authorized');\r\n        }\r\n        let url = UserIdApi.replace('%userID%', userId);\r\n        let headers = new Headers({ 'Content-Type': 'application/json' });\r\n        let options = new RequestOptions({ headers: headers });\r\n\r\n        return this._http.delete(url, options)\r\n            .do(data => {\r\n                console.debug('UserDelete' +\r\n                    '\\nUrl: ' + UserListApi +\r\n                    '\\nData: ' + JSON.stringify(data));\r\n            })\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    private handleError(err: any): Observable<string> {\r\n        let message: string;\r\n        if (err.message) {\r\n            message = err.message;\r\n        } else {\r\n            message = (err.status) ?\r\n                `${err.status} : ${err.statusText}` :\r\n                'Server connection error';\r\n        }\r\n\r\n        console.error(message);\r\n        return Observable.throw(message);\r\n    }\r\n}"],"sourceRoot":"/source/"}