{"version":3,"sources":["app/settings/userlist/user-filter.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAGO,eAAe,CAAC,CAAA;AACvB,qBAKO,eAAe,CAAC,CAAA;AAEvB,2BAA2B,iBAAiB,CAAC,CAAA;AAC7C,QAAO,yBAAyB,CAAC,CAAA;AACjC,QAAO,uBAAuB,CAAC,CAAA;AAC/B,QAAO,sBAAsB,CAAC,CAAA;AAG9B,mCAEO,sBAAsB,CAAC,CAAA;AAG9B;IAII,+BAAoB,KAAW;QAAX,UAAK,GAAL,KAAK,CAAM;QAC3B,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC;IACzB,CAAC;IAEM,gDAAgB,GAAvB;QACI,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC;YAC1B,MAAM,CAAC,uBAAU,CAAC,KAAK,CAAC,wBAAwB,CAAC,CAAC;QACtD,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,iCAAY,CAAC;aAC9B,GAAG,CAAC,UAAA,GAAG,IAAI,OAAU,GAAG,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,UAAC,IAAS,IAAK,OAAA,IAAI,CAAC,cAAc,EAAnB,CAAmB,CAAC,EAA5D,CAA4D,CAAC;aACxE,EAAE,CAAC,UAAA,IAAI;YACJ,OAAO,CAAC,KAAK,CAAC,WAAW;gBACrB,SAAS,GAAG,iCAAY;gBACxB,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;QAC3C,CAAC,CAAC;aACD,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACjC,CAAC;IAEO,2CAAW,GAAnB,UAAoB,GAAQ;QACxB,IAAI,OAAe,CAAC;QACpB,EAAE,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC;YACd,OAAO,GAAG,GAAG,CAAC,OAAO,CAAC;QAC1B,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,OAAO,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC;gBACf,GAAG,CAAC,MAAM,WAAM,GAAG,CAAC,UAAY;gBACnC,yBAAyB,CAAC;QAClC,CAAC;QAED,yBAAyB;QACzB,MAAM,CAAC,uBAAU,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;IACrC,CAAC;IApCL;QAAC,iBAAU,EAAE;;6BAAA;IAqCb,4BAAC;AAAD,CApCA,AAoCC,IAAA;AApCY,6BAAqB,wBAoCjC,CAAA","file":"app/settings/userlist/user-filter.service.js","sourcesContent":["import {\r\n    Injectable,\r\n    Optional\r\n} from '@angular/core';\r\nimport {\r\n    Http,\r\n    Response,\r\n    Headers,\r\n    RequestOptions\r\n} from '@angular/http';\r\n\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/catch';\r\nimport 'rxjs/add/operator/map';\r\nimport 'rxjs/add/operator/do';\r\n\r\nimport { IAuthUser } from '../../shared/auth/auth-user.model';\r\nimport {\r\n    CompaniesApi\r\n} from './user-list.constant';\r\n\r\n@Injectable()\r\nexport class DataFilterUserService {\r\n\r\n    private _role: string;\r\n\r\n    constructor(private _http: Http) {\r\n        this._role = 'admin';\r\n    }\r\n\r\n    public getCompaniesList(): Observable<any> {\r\n        if (this._role === 'anonym') {\r\n            return Observable.throw('User is not authorized');\r\n        }\r\n\r\n        return this._http.get(CompaniesApi)\r\n            .map(res => <string[]>res.json().map((item: any) => item.clientfullname))\r\n            .do(data => {\r\n                console.debug('Companies' +\r\n                    '\\nUrl: ' + CompaniesApi +\r\n                    '\\nData: ' + JSON.stringify(data));\r\n            })\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    private handleError(err: any): Observable<string> {\r\n        let message: string;\r\n        if (err.message) {\r\n            message = err.message;\r\n        } else {\r\n            message = (err.status) ?\r\n                `${err.status} : ${err.statusText}` :\r\n                'Server connection error';\r\n        }\r\n\r\n        //console.error(message);\r\n        return Observable.throw(message);\r\n    }\r\n}\r\n\r\n"],"sourceRoot":"/source/"}